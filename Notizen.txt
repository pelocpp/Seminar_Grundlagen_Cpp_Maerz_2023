// =====================================================================
// Notizzettel.txt
// =====================================================================

Grundlagen C++ / Firmenseminar Vitronic Wiesbaden

Call-to-Action:    Fortgeschrittenes Seminar:  8. bis 11. Mai

peter.loos@gmx.de

Peter Loos  // "Du"

"Guten Morgen"

30 Jahre // Entwicklung // Schulung 

C/C++,  Java,  C#, Mobile Frameworks (Java) , JavaScript

C++:  "Back to the Roots"

2 Tools:

a) Visual Studio

b) Github

https://github.com/pelocpp

https://github.com/pelocpp/cpp_basic_examples

Inhalt: Siehe .pdf Agenda

== Was ist meine Erwartung?

== Was bringe ich mit?  Kenntnisse in Programmiersprachen?

== Was muss unbedingt behandelt werden?

-- STL
-- Dynamische Speicherverwaltung
-- Nomenklatur - Fachsprache, Struktur
-- Error Handling ( gibt es etwas anderes als try-catch ? )

(Java), MathLab, Python, C

Bitte: Fragen, Fragen, Fragen , ...

Übungen ...  Nachmittags ...

// =====================================================================

Mittagspause: 12 bis 13 Uhr

// =====================================================================

-- Klasse, Objekt:

Was ist eine Klasse:

   Ansammlung von Daten und Methoden (Funktionen), die zusammen gehören.

Klasse versus Objekt:

Klasse: Beschreibung / Definition / Festlegung

Objekt: Synonym: Instanz

    Ein Objekt ist ein realer Satz dieser Daten und Methoden.

C++:  Vor 40 Jahren konzipiert.

Umsetzung in C++: 2 Dateien

Beispiel:  Uhrzeit:   Stunden, Minuten, Sekunden  // Time 

class Uhrzeit

class Time     <===

Einrücken:  Jaaaaaa, für die bessere Lesbarkeit

            Aber: KEIN Einfluss auf Syntax (siehe Python)

// ---------------------------------------

Frage:  Eine Funktion mit 2 / mehreren Ergebnissen:

A) Man liefert als Rückgabetyp ein Array / eine Struktur / ein Objekt zurück

B) Über die Parameter: Diese müssen dann vom Typ Zeiger / Referenz sein.


// ---------------------------------------


Klasse:

Header-File: Schnittstelle  ( .h )

Implementierungs-Datei: Realisierung    ( .cpp )

// ---------------------------------------

Wie erstelle ich ein ausführbares Programm?

In 2 Schritten:

a) Syntax  // rechte Maustaste // "Compile" // geht schneller

b) Maschinencode  //  "Build" // ist langsamer

// ---------------------------------------

Nomenklatur:
------------

Time:         Ist eine KLASSE (Beschreibung)

now, pause:   OBJEKTE / INSTANZEN

( Funktion: Entspricht der C-Programmierung / prozedurale Programmierung )

now.print:    METHODE: Wird an einem OBJEKT aufgerufen

now.hour:     INSTANZVARIABLE (Objektvariable: sagt man nicht), MEMBER VARIABLE

              Variablen eines Objekts

// ---------------------------------------

Ein Objekt ist bei seiner Erzeugung mit (vernünftigen) Daten zu erzeugen.

Konstruktor:

Verknüpfung der Erzeugung eines Objekts mit dem Aufruf einer spez. Methode: Vorbelegungsdaten.

Diese Methoden nennt man Konstruktoren: Sie "konstruieren" das Objekt 

Syntax:  2 Besonderheiten:

i) Name == Namen der Klasse 
ii) KEIN Rückgabetyp (auch nicht void)


Paradigma der OO:

Ein Objekt hat zu jedem Zeitpunkt seines Lebens
  "sinnvolle" Werte zu enthalten -
  auch bei seiner Erzeugung: Konstruktoren.

// ---------------------------------------

Ästhetik von Quellcode:

Parameter wir h, m, x, y, a, b: Das ist schwer lesbar .. 

   und sollte vermieden werden.

a) Doppeldeutigkeiten können mit this aufgelöst werden.

// Java Stil

Time::Time(int hour, int m, int s)
{
    this -> hour = hour;
    ...
}


b) Anderer Ansatz:

// C++ Stil:   Instanzvariablen : Member  ===> m_ als Präfix verwendet wird

// ---------------------------------------

Zugriff auf Objekte // Access Rights // Zugriffsrechte

A) Ein Zugriff von "Außen" wird mit "private" verboten

B) Möchte ich auf eine Instanzvariable dennoch zugreifen:

   Spez. Methoden: "getter / setter" - Methoden


C)

public:     Von überall aus zugänglich
private:     Nur innerhalb der Klasse (Methoden der Klasse) zugänglich
protected:  In Kindklassen (Vererbung)

// =======================================================

Falsche Parameter:  try-catch ist in den meisten Fällen zu "hart"


A)  Logging // Traces: 


B) Programm weiterlaufen lassen:  

    Silent Error Recovery: Falscher Wert wird ignoriert + Log-File Meldung.

