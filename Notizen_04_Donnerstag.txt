// =====================================================================
// Notizzettel.txt
// =====================================================================

Notizzettel Donnerstag
----------------------

Grundlagen C++ / Firmenseminar Vitronic Wiesbaden

Call-to-Action:    Fortgeschrittenes Seminar:  8. bis 11. Mai

peter.loos@gmx.de

// =====================================================================

To Do :

        virtual ~IAccount() {};

final: Verbietet Überschreiben in Kind Klassen

// public interface
void deposit(double amount) final override;


override: Nimmt Bezug zur Vaterklasse - ich will diese Methode überschreiben

final:    Nimmt Bezug zu möglichen Kindklassen - Methode kann nicht weiter überschrieben werden

// =====================================================================


Virtueller Basiusklassen Destruktor:

Wenn vor einem Destruktor NICHT virtual steht,

können in einer Hierarchie Aufrufe von DESTRUKTOREN VERLOREN gehen !!!!

// =====================================================================

class Account : private  IAccount

Wozu public:

A) Vererbung ist ein Gedankengut quasi aller OO Sprachen 

B) In C++ hat man hier sehr ausführlich unterstützt: Verschiedene Möglichkeiten
  
     des Zugriffs auf die Variablen in der Basisklasse:

        https://www.geeksforgeeks.org/inheritance-in-c/

C) In nahezu allen anderen (Nicht C++) sprachen

   Nur "public" Vererbung ist vorhanden.

   class Account : public  IAccount

// =====================================================================


C++:

==>  OO:   Objekt-Orientierte Programmierung

==>  GP:   Generische Programmierung (Templates)


C++:  Bjarne Stroustrup  (C mit Klassen / C with Classes)

GP:   Alexander Alexandrowitsch Stepanow


Bibliothek: STL   Standard Template Library

"Stilistische Unterschiede sind erkennbar"

// ===================================================

3 Ebenen Modell der Generische Programmierung :

https://github.com/pelocpp/cpp_modern_examples/blob/master/GeneralSnippets/TemplateClassBasics/TemplatesClassBasics.md

Generische Programmierung:

A) Schablonen für Klassen

B) Schablonen für Funktionen

// ===================================================

Hmmm, es gibt komplizierte Ecken von C++:

Was verwende "ich" als Entwickler von C++:

Genau das, was ich verstehe !!!!!!!!!!!!!!!!!!!!!

// ===================================================

STL:

== Container

      ===> Verwaltet Daten - desselben Typs

== Iterator

      ===> Beschreibt eine Position in einem Container

== Algorithmus

      ===> Suchen, Durchlaufen, Umwandeln, Vorbelegen, Kopieren, ..

== Funktors

      ===> Spezielle Art einer normalen Funktion

Offizielle Doku:

https://en.cppreference.com/w/

// ===================================================

Container:  Sammelt Daten

Array  // Vector

Listen

Dictionary // Map

Queue

Stack

// ===================================================

std::vector:

== Hält intern ein bestimmtes Volumen für die Daten vor.

== Kann man über 'capacity' auslesen

== Kann man auch einstellen

9  13  19   ===> Mal 1.5  // Faktor

// ===================================================

Iterator

===> Beschreibt eine Position in einem Container

"Index wie bei einem Array"


Das mit dem Index geht nicht bei anderen Typen von Containern !!!

zB:  Linked List  // C++:  std::forward_list

Hier muss man mit Zeiger-Arithmetik von einem Element zum nächsten 
schreiten solange, bis man beim gewünschten Element angekommen ist.

Konzept:

Wie kann ich eine Position UNABHÄNGIG von einem Container beschreiben ???

std::vector:        Index (int)

std::forward_list:  Adresse eines Knotens 

std::map:           Über den Schlüssel (Key) kann man zugreifen


Antwort:

Typ ist im jeweiligen Container hinterlegt.

==> Welche Methoden / Funktionen / Operatoren hat dieser Typ

A) Ist per Konzept definiert:

   operator ==     - Vergleich von Positionen
   operator ++     - Gehe zum nächsten Element im Container
   operator *      - Gib mir das Element aus dem Container
                     an dieser Stelle (Position)


B) Man könnte das in der Realisierung auch nachschauen

   (  das wollen wir nicht tun )



Wie erhalte ich eine Position eines Containers ????

Ist per Konzept an jedem Container definiert:

I)  Es gibt die Position des ERSTEN Elements:

        Methode begin()

II) Es gibt die Position des LETZTEN Elements:

        Methode end()

    EXAKTER: end() ist die Position NACH dem LETZTEN Element.


    13:05  