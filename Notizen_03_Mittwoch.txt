// =====================================================================
// Notizzettel.txt
// =====================================================================

Notizzettel Mittwoch
--------------------

Grundlagen C++ / Firmenseminar Vitronic Wiesbaden

Call-to-Action:    Fortgeschrittenes Seminar:  8. bis 11. Mai

peter.loos@gmx.de

Peter Loos

// =====================================================================

Lösung zur Klasse Time:

Siehe Dateien Excercise_Fraction.h, Excercise_Fraction.cpp und Excercise_Fraction_Program.cpp

Oder auch

https://github.com/pelocpp/cpp_basic_examples/tree/master/Examples/Fraction/Resources/Readme.md

// =====================================================================

Warum kann man den ++ Operator 2 Mal definieren / implementieren?

int n = 1;

...

int m = ++n;  // Pre-Inkrement
// m = 2, n = 2

oder 

int m = n++;  // Post-Inkrement (Kopie des alten Werts bereitgestellt werden)
// m = 1, n = 2


Call-to-Action:

for (int i = 0; i < 10; ++i )  // <=== ++i  //  // Pre-Inkrement

friend Fraction& operator++ (Fraction&);            // prefix increment

friend const Fraction operator++ (Fraction&, int);  // postfix increment

2. Parameter a) hat keinen Namen b) wird NICHT verwendet, aber:

Auf Grund der Schnittstelle (2 Parameter) handelt es sich um den Postfix increment

// ================================================================

Dynamische Daten und Objekte
----------------------------

Beobachtungen:

Das Erstellen einer Kopie wird in C++ automatisch bereit gestellt
  (Kopier - Konstruktor)

-------------------------------------------------------------------

Aussage: 

Neben Konstruktoren gibt es auch EINEN Destruktor.

-------------------------------------------------------------------

Ausführung an einem Beispiel:  // Kopie

:>>>:  ... 800:   wurde freigegeben

:>>>:  ... BF0:   wurde freigegeben

-------------------------------------------------------------------

Wie sieht dieser Themenkreis bei Smart-Pointern aus:

In diesem Fall muss ich den Kopier-Konstruktor NICHT schreiben.

Absolut: Go - for - Smart Pointer:  Nach "14" Tagen sind diese intus.


Wie nähere ich mich der Thematik "Pointer" am besten:

A) Klassische Zeiger verstehen (anwenden)

B) Kopieren von Zeigern / Objekten verstehen (anwenden) / Kopier-Semantik

C) Move-Semantik verstehen (anwenden)

D) Smart-Pointer verstehen (anwenden) / keine klassische Zeiger mehr verwenden


A) und B): "Maschinenraum von C++" 

-------------------------------------------------------------------

Ausführung an einem Beispiel:  // Kopie

:>>>:  ... 800:   wurde freigegeben

:>>>:  ... BF0:   wurde freigegeben

-------------------------------------------------------------------

Abschluss zu Dynamische Daten und Objekte:

>>>>:   Rule - of - Three   oder "Regel der 3"

        oder:   Big-Three 

        Eine C++ - Klasse muss haben:

        i)   Destruktor
        ii)  Kopier-Konstruktor   
        iii) Wertzuweisungs-Operator (operator=)


>>>>:   Rule - of - Zero

        Eine C++ - Klasse besitzt einen AUTOMATISCH ERZEUGTEN

        Destruktor, Kopier-Konstruktor und Wertzuweisungs-Operator.



Wann setzt ich (Anwender) Rule - of - Three ein ?

>: Wenn in der Klasse dynamisch allokierter Speicher (new) zum
   Einsatz kommt.

Wann setzt ich (Anwender) Rule - of - Zero ein ?

>: Wenn in der Klasse KEIN dynamisch allokierter Speicher zum
   Einsatz kommt.

   Also in allen anderen Fällen.


Rule - of - Zero:
-----------------

>>> Kann ich bei Smart-Pointern anwenden.

>>> Auch die Klassen der Standard-Bibliothek erlauben Rule - of - Zero

    ( std::vector )

-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------

Vererbung:

Wozu?  Um Code wieder zu verwenden!

Steckt in vielen Bibliotheken drin.

Ist ein Paradigma der OO: C#, Java, JavaScript, C++, ........

Hinweis: 

Vererbung erfordert das eine oder andere syntaktische Konstrukt.

LEIDER: Der Compiler gibt keine Fehlermeldung aus, wenn die Vererbung
        falsch / schlecht eingesetzt wird.


Vorüberlegung:

== Klasse Rechteck  (Rectangle)

== Klasse FarbigesRechteck  (ColoredRectangle)

>>>:  Das Wort FarbigesRechteck beinhaltet das Wort Rechteck

      Dieses Rechteck kann auch farbiges Rechteck genannt werden.

      Ein blaues Rechteck ist ein farbiges Rechteck

      Ein farbiges Rechteck ist ein Rechteck
      --------------------------------------

Software-Design:    Beziehungen zwischen Klassen

Beziehungs-Typus:   ist-ein Beziehung  // is - a Relationship

NUR IM FALLE DER "ist-ein Beziehung" darf die Vererbung angewendet werden !!!





Kontrollfrage:
--------------

Klasse Punkt (class Point)

Klasse Linie (class Line)

>>>:  Auf einer Linie liegen viele Punkte

      Eine Linie ist durch zwei Punkte bestimmt

      Eine Linie hat zwei Punkte
      --------------------------

Software-Design:    Beziehungen zwischen Klassen

Beziehungs-Typus:   hat-ein Beziehung (Plural)  // has - a Relationship

    Bildet die Umsetzung auf Instanz-Variablen ab !!!

class Line
{
    private:

        Point m_begin;
        Point m_end;
};



Frage: Kann ich sagen:  Eine Linie ist ein Punkt?  Nein

Frage: Kann ich sagen:  Ein Punkt ist eine Linie?  Nein

      >>>>>: Hier wird Vererbung UNTER KEINEN UMSTÄNDEN eingesetzt !!!


Jegliche Anwendung der Vererbung MUSS INTUITIV sein.

// =============================================================

Nomenklatur:
------------

2 Klassen stehen in der Vererbungs-Beziehung // ist-ein Beziehung:

== Vater- und Kind-Klasse

== Parent- und Child-Class

== Base- und Derived-Class

== Spezialisierung:   Eine abgeleitete Klasse ist ein Spezialfall der Basisklasse

== Generalisierung:   Eine Basisklasse ist eine Verallgemeinerung (Generalisierung)
                   der abgeleiteten Klasse

== Klassenhierarchie

--------------------------------------------------------------------

Methoden im Umfeld der Vererbung
--------------------------------

Virtueller Methodenaufrufmechanismus:

virtual: 

    Es wird die Methode des Objekts aufgerufen, dessen Adresse zur LAUFZEIT des Programms
    an eine Zeigervariable zugewiesen wird.

    LATE - BINDING

Ohne virtual: 

    Es wird die Methode des Objekts aufgerufen,
    dessen Datentyp zur ÜBERSETZUNGSZEIT vorliegt.

    EARLY - BINDING

--------------------------------------------------

ZUr Verwendung von 'virtual':

   "Einmal virtual - immer virtual"


   ABER:  Mit override kann ich Tippfehler in Methoden vermeiden ... und sehe visuall,
          ob eine bestimmte Methode eine andere Methode in einer Vaterklasse überschreibt.

--------------------------------------------------

Nomenklatur:
------------

Überschreiben:  overwrite 

override: ?????  Vorrang vor etw. haben // sich über etw. hinwegsetzen 

override:  Von etwas die Bedeutung verändern 

Anekdote:  Ersten Menschen, der ein C++ Buch von Englisch ins Deutsche übersetzt hat.
           Überschreiben ....

--------------------------------------------------

Überschreiben im Zusammenhang mit der Vererbung:
------------------------------------------------

3 Gestaltungsmöglichkeiten:
---------------------------

A) Eine Methode wird vererbt (von der Vaterklasse).

   Es gibt KEINE Notwendigkeit, diese Methode in der Kindklasse zu überschreiben.

B) Eine Methode (der Vaterklasse) wird (in der Kindklasse) ersetzt.

   Der Quellcode der Methode in der Vaterklasse wird verdeckt.

   >>> !!! Hmmm, wir haben doch das Prinzip der ist-ein Beziehung.

C) Eine Methode  (der Vaterklasse) wird (in der Kindklasse) erweitert:

   Durch Aufruf der Methode der Vaterklasse.

Anmerkung: Ist B) wirklich erwünscht ????????????

------------------------------------------------
------------------------------------------------
------------------------------------------------

Beobachtung:

    for (int i = 0; i < 5; ++i)
    {
        rects[i]->draw();   // <=
    }

    Weiß nicht genau, welche draw-Methode aufgerufen wird ...

Viele =========>   Poly

Gestalt =======>   Morphus

Polymorphismus :-)) Vielgestaltigkeit

------------------------------------------------

Konzeption von Klassen:  Schnittstellenkonzept
----------------------------------------------

Es ist möglich, die Methoden von (vielen) Klassen festzulegen // ohne sie dabei zu implementieren.

Schnittstellenkonzept:   interface  (Java, C#, ...)

interface UIObject
{
   void draw();
   void eraseBackground();
   void drawBorder();

   int  m_member;  // error
}

Ein interface stellt einen VERTRAG dar.

Bemerkung: Zu einem interface gehören KEINE Daten !!!

Eine Schnittstelle sollte / hat einen "Concern" / hat eine Zuständigkeit.

"Seperation of Concerns"  // Trennung von Zuständigkeiten !!!!

// =====================================================================

Konzeption von Klassen:  Abstrakte Klasse
-----------------------------------------

Was ist der Unterschied zwischen einer abstrakten Klasse und einer Schnittstelle ?


A) Eine abstrakten Klasse ist / kann eine Teilrealisierung der Methoden einer Schnittstelle sein.

B) Eine abstrakte Klasse kann Daten enthalten.

Andere Formulierung:  Eine Abstrakte Klasse ist eine unvollständige Klasse.

Von einer abstrakten Klasse kann ich KEIN Objekt anlegen !!!

// weil Realisierungen einer oder mehrerer Methoden fehlen.

C) Eine Abstrakte Klasse ist eine Hilfsrealisierung für abgeleitete Klassen.

// =====================================================================

Fazit:

Oberste Ebene:     Schnittstellen

Mittlere Ebene:    Abstrakte Klassen (Teile der Schnittstellen realisieren),
                   sich also von Schnittstellen ableiten (die also Schnittstellen realisieren)

Unterste Ebene:    Konkrete Klassen, die sich von abstrakten Klassen ableiten

// =====================================================================

Übung:

"Wir gehen zur Sparkasse"

== Ein Bankkonto   // class Account

== Ein Bankkonto hat eine Kontonummer

== Giro-Konto: Das kann man überziehen // Dispo Limit // keine Zinsen

== Sparbuch:   Bekommt einmal im Jahr Zinsen gutgeschrieben

== Studentenkonto: Das kann man NICHT überziehen // KEIN Dispo Limit //  keine Zinsen

== Aktivitäten // Methoden:

   Einzahlen   // to deposit

   Abheben     // to withdraw

   Kontostand abfragen   // getBalance

------------------------------------------------------------------

Wir wollen konzeptionell vorgehen:

Frage:  Wie könnte man eine Schnittstelle IAccount definieren ???

Frage:  Wie könnte man eine abstrakte Klasse Account definieren ???

Frage:  Wie könnte man konkrete Klassen Giro-Konto (CurrentAccout), Sparbuch (SavingsAccount),
        und Studentenkonto (StudentsAccount) realisieren ???
      
------------------------------------------------------------------

Nicht verlangt: Ein Bankinstitut -- Container / Verwaltung für viele Konten sein.

------------------------------------------------------------------

https://github.com/pelocpp/cpp_basic_examples/blob/master/Examples/AccountsAndBank/Resources/Readme.md


Lösung

https://github.com/pelocpp/cpp_basic_examples/tree/master/Examples/AccountsAndBank

------------------------------------------------------------------

